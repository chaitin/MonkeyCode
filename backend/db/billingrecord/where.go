// Code generated by ent, DO NOT EDIT.

package billingrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/MonkeyCode/backend/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTenantID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUserID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldModel, v))
}

// Operation applies equality check predicate on the "operation" field. It's identical to OperationEQ.
func Operation(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldOperation, v))
}

// InputTokens applies equality check predicate on the "input_tokens" field. It's identical to InputTokensEQ.
func InputTokens(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldInputTokens, v))
}

// OutputTokens applies equality check predicate on the "output_tokens" field. It's identical to OutputTokensEQ.
func OutputTokens(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldOutputTokens, v))
}

// Cost applies equality check predicate on the "cost" field. It's identical to CostEQ.
func Cost(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCost, v))
}

// RequestTime applies equality check predicate on the "request_time" field. It's identical to RequestTimeEQ.
func RequestTime(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldRequestTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldTenantID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldUserID, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldModel, v))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldModel, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldOperation, vs...))
}

// OperationGT applies the GT predicate on the "operation" field.
func OperationGT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldOperation, v))
}

// OperationGTE applies the GTE predicate on the "operation" field.
func OperationGTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldOperation, v))
}

// OperationLT applies the LT predicate on the "operation" field.
func OperationLT(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldOperation, v))
}

// OperationLTE applies the LTE predicate on the "operation" field.
func OperationLTE(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldOperation, v))
}

// OperationContains applies the Contains predicate on the "operation" field.
func OperationContains(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContains(FieldOperation, v))
}

// OperationHasPrefix applies the HasPrefix predicate on the "operation" field.
func OperationHasPrefix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasPrefix(FieldOperation, v))
}

// OperationHasSuffix applies the HasSuffix predicate on the "operation" field.
func OperationHasSuffix(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldHasSuffix(FieldOperation, v))
}

// OperationEqualFold applies the EqualFold predicate on the "operation" field.
func OperationEqualFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEqualFold(FieldOperation, v))
}

// OperationContainsFold applies the ContainsFold predicate on the "operation" field.
func OperationContainsFold(v string) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldContainsFold(FieldOperation, v))
}

// InputTokensEQ applies the EQ predicate on the "input_tokens" field.
func InputTokensEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldInputTokens, v))
}

// InputTokensNEQ applies the NEQ predicate on the "input_tokens" field.
func InputTokensNEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldInputTokens, v))
}

// InputTokensIn applies the In predicate on the "input_tokens" field.
func InputTokensIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldInputTokens, vs...))
}

// InputTokensNotIn applies the NotIn predicate on the "input_tokens" field.
func InputTokensNotIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldInputTokens, vs...))
}

// InputTokensGT applies the GT predicate on the "input_tokens" field.
func InputTokensGT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldInputTokens, v))
}

// InputTokensGTE applies the GTE predicate on the "input_tokens" field.
func InputTokensGTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldInputTokens, v))
}

// InputTokensLT applies the LT predicate on the "input_tokens" field.
func InputTokensLT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldInputTokens, v))
}

// InputTokensLTE applies the LTE predicate on the "input_tokens" field.
func InputTokensLTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldInputTokens, v))
}

// OutputTokensEQ applies the EQ predicate on the "output_tokens" field.
func OutputTokensEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldOutputTokens, v))
}

// OutputTokensNEQ applies the NEQ predicate on the "output_tokens" field.
func OutputTokensNEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldOutputTokens, v))
}

// OutputTokensIn applies the In predicate on the "output_tokens" field.
func OutputTokensIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldOutputTokens, vs...))
}

// OutputTokensNotIn applies the NotIn predicate on the "output_tokens" field.
func OutputTokensNotIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldOutputTokens, vs...))
}

// OutputTokensGT applies the GT predicate on the "output_tokens" field.
func OutputTokensGT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldOutputTokens, v))
}

// OutputTokensGTE applies the GTE predicate on the "output_tokens" field.
func OutputTokensGTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldOutputTokens, v))
}

// OutputTokensLT applies the LT predicate on the "output_tokens" field.
func OutputTokensLT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldOutputTokens, v))
}

// OutputTokensLTE applies the LTE predicate on the "output_tokens" field.
func OutputTokensLTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldOutputTokens, v))
}

// CostEQ applies the EQ predicate on the "cost" field.
func CostEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCost, v))
}

// CostNEQ applies the NEQ predicate on the "cost" field.
func CostNEQ(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldCost, v))
}

// CostIn applies the In predicate on the "cost" field.
func CostIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldCost, vs...))
}

// CostNotIn applies the NotIn predicate on the "cost" field.
func CostNotIn(vs ...int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldCost, vs...))
}

// CostGT applies the GT predicate on the "cost" field.
func CostGT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldCost, v))
}

// CostGTE applies the GTE predicate on the "cost" field.
func CostGTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldCost, v))
}

// CostLT applies the LT predicate on the "cost" field.
func CostLT(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldCost, v))
}

// CostLTE applies the LTE predicate on the "cost" field.
func CostLTE(v int64) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldCost, v))
}

// RequestTimeEQ applies the EQ predicate on the "request_time" field.
func RequestTimeEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldRequestTime, v))
}

// RequestTimeNEQ applies the NEQ predicate on the "request_time" field.
func RequestTimeNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldRequestTime, v))
}

// RequestTimeIn applies the In predicate on the "request_time" field.
func RequestTimeIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldRequestTime, vs...))
}

// RequestTimeNotIn applies the NotIn predicate on the "request_time" field.
func RequestTimeNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldRequestTime, vs...))
}

// RequestTimeGT applies the GT predicate on the "request_time" field.
func RequestTimeGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldRequestTime, v))
}

// RequestTimeGTE applies the GTE predicate on the "request_time" field.
func RequestTimeGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldRequestTime, v))
}

// RequestTimeLT applies the LT predicate on the "request_time" field.
func RequestTimeLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldRequestTime, v))
}

// RequestTimeLTE applies the LTE predicate on the "request_time" field.
func RequestTimeLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldRequestTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BillingRecord {
	return predicate.BillingRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BillingRecord) predicate.BillingRecord {
	return predicate.BillingRecord(sql.NotPredicates(p))
}
