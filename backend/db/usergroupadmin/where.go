// Code generated by ent, DO NOT EDIT.

package usergroupadmin

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/MonkeyCode/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldLTE(FieldID, id))
}

// UserGroupID applies equality check predicate on the "user_group_id" field. It's identical to UserGroupIDEQ.
func UserGroupID(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldUserGroupID, v))
}

// AdminID applies equality check predicate on the "admin_id" field. It's identical to AdminIDEQ.
func AdminID(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldAdminID, v))
}

// UserGroupIDEQ applies the EQ predicate on the "user_group_id" field.
func UserGroupIDEQ(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldUserGroupID, v))
}

// UserGroupIDNEQ applies the NEQ predicate on the "user_group_id" field.
func UserGroupIDNEQ(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNEQ(FieldUserGroupID, v))
}

// UserGroupIDIn applies the In predicate on the "user_group_id" field.
func UserGroupIDIn(vs ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldIn(FieldUserGroupID, vs...))
}

// UserGroupIDNotIn applies the NotIn predicate on the "user_group_id" field.
func UserGroupIDNotIn(vs ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNotIn(FieldUserGroupID, vs...))
}

// AdminIDEQ applies the EQ predicate on the "admin_id" field.
func AdminIDEQ(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldEQ(FieldAdminID, v))
}

// AdminIDNEQ applies the NEQ predicate on the "admin_id" field.
func AdminIDNEQ(v uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNEQ(FieldAdminID, v))
}

// AdminIDIn applies the In predicate on the "admin_id" field.
func AdminIDIn(vs ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldIn(FieldAdminID, vs...))
}

// AdminIDNotIn applies the NotIn predicate on the "admin_id" field.
func AdminIDNotIn(vs ...uuid.UUID) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.FieldNotIn(FieldAdminID, vs...))
}

// HasUserGroup applies the HasEdge predicate on the "user_group" edge.
func HasUserGroup() predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserGroupTable, UserGroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserGroupWith applies the HasEdge predicate on the "user_group" edge with a given conditions (other predicates).
func HasUserGroupWith(preds ...predicate.UserGroup) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(func(s *sql.Selector) {
		step := newUserGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(func(s *sql.Selector) {
		step := newAdminStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserGroupAdmin) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserGroupAdmin) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserGroupAdmin) predicate.UserGroupAdmin {
	return predicate.UserGroupAdmin(sql.NotPredicates(p))
}
