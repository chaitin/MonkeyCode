// Code generated by ent, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/MonkeyCode/backend/consts"
	"github.com/chaitin/MonkeyCode/backend/db/model"
	"github.com/chaitin/MonkeyCode/backend/db/record"
	"github.com/chaitin/MonkeyCode/backend/db/user"
	"github.com/google/uuid"
)

// Record is the model entity for the Record schema.
type Record struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// ModelID holds the value of the "model_id" field.
	ModelID uuid.UUID `json:"model_id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID string `json:"task_id,omitempty"`
	// ModelType holds the value of the "model_type" field.
	ModelType consts.ModelType `json:"model_type,omitempty"`
	// Prompt holds the value of the "prompt" field.
	Prompt string `json:"prompt,omitempty"`
	// Completion holds the value of the "completion" field.
	Completion string `json:"completion,omitempty"`
	// IsAccept holds the value of the "is_accept" field.
	IsAccept bool `json:"is_accept,omitempty"`
	// ProgramLanguage holds the value of the "program_language" field.
	ProgramLanguage string `json:"program_language,omitempty"`
	// WorkMode holds the value of the "work_mode" field.
	WorkMode string `json:"work_mode,omitempty"`
	// CodeLines holds the value of the "code_lines" field.
	CodeLines int64 `json:"code_lines,omitempty"`
	// InputTokens holds the value of the "input_tokens" field.
	InputTokens int64 `json:"input_tokens,omitempty"`
	// OutputTokens holds the value of the "output_tokens" field.
	OutputTokens int64 `json:"output_tokens,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecordQuery when eager-loading is set.
	Edges        RecordEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RecordEdges holds the relations/edges for other nodes in the graph.
type RecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Model holds the value of the model edge.
	Model *Model `json:"model,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// ModelOrErr returns the Model value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecordEdges) ModelOrErr() (*Model, error) {
	if e.Model != nil {
		return e.Model, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: model.Label}
	}
	return nil, &NotLoadedError{edge: "model"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Record) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case record.FieldIsAccept:
			values[i] = new(sql.NullBool)
		case record.FieldCodeLines, record.FieldInputTokens, record.FieldOutputTokens:
			values[i] = new(sql.NullInt64)
		case record.FieldTaskID, record.FieldModelType, record.FieldPrompt, record.FieldCompletion, record.FieldProgramLanguage, record.FieldWorkMode:
			values[i] = new(sql.NullString)
		case record.FieldCreatedAt, record.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case record.FieldID, record.FieldUserID, record.FieldModelID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Record fields.
func (r *Record) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case record.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case record.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				r.UserID = *value
			}
		case record.FieldModelID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field model_id", values[i])
			} else if value != nil {
				r.ModelID = *value
			}
		case record.FieldTaskID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				r.TaskID = value.String
			}
		case record.FieldModelType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model_type", values[i])
			} else if value.Valid {
				r.ModelType = consts.ModelType(value.String)
			}
		case record.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				r.Prompt = value.String
			}
		case record.FieldCompletion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field completion", values[i])
			} else if value.Valid {
				r.Completion = value.String
			}
		case record.FieldIsAccept:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_accept", values[i])
			} else if value.Valid {
				r.IsAccept = value.Bool
			}
		case record.FieldProgramLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_language", values[i])
			} else if value.Valid {
				r.ProgramLanguage = value.String
			}
		case record.FieldWorkMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field work_mode", values[i])
			} else if value.Valid {
				r.WorkMode = value.String
			}
		case record.FieldCodeLines:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field code_lines", values[i])
			} else if value.Valid {
				r.CodeLines = value.Int64
			}
		case record.FieldInputTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_tokens", values[i])
			} else if value.Valid {
				r.InputTokens = value.Int64
			}
		case record.FieldOutputTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_tokens", values[i])
			} else if value.Valid {
				r.OutputTokens = value.Int64
			}
		case record.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case record.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Record.
// This includes values selected through modifiers, order, etc.
func (r *Record) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Record entity.
func (r *Record) QueryUser() *UserQuery {
	return NewRecordClient(r.config).QueryUser(r)
}

// QueryModel queries the "model" edge of the Record entity.
func (r *Record) QueryModel() *ModelQuery {
	return NewRecordClient(r.config).QueryModel(r)
}

// Update returns a builder for updating this Record.
// Note that you need to call Record.Unwrap() before calling this method if this Record
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Record) Update() *RecordUpdateOne {
	return NewRecordClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Record entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Record) Unwrap() *Record {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("db: Record is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Record) String() string {
	var builder strings.Builder
	builder.WriteString("Record(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("model_id=")
	builder.WriteString(fmt.Sprintf("%v", r.ModelID))
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(r.TaskID)
	builder.WriteString(", ")
	builder.WriteString("model_type=")
	builder.WriteString(fmt.Sprintf("%v", r.ModelType))
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(r.Prompt)
	builder.WriteString(", ")
	builder.WriteString("completion=")
	builder.WriteString(r.Completion)
	builder.WriteString(", ")
	builder.WriteString("is_accept=")
	builder.WriteString(fmt.Sprintf("%v", r.IsAccept))
	builder.WriteString(", ")
	builder.WriteString("program_language=")
	builder.WriteString(r.ProgramLanguage)
	builder.WriteString(", ")
	builder.WriteString("work_mode=")
	builder.WriteString(r.WorkMode)
	builder.WriteString(", ")
	builder.WriteString("code_lines=")
	builder.WriteString(fmt.Sprintf("%v", r.CodeLines))
	builder.WriteString(", ")
	builder.WriteString("input_tokens=")
	builder.WriteString(fmt.Sprintf("%v", r.InputTokens))
	builder.WriteString(", ")
	builder.WriteString("output_tokens=")
	builder.WriteString(fmt.Sprintf("%v", r.OutputTokens))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Records is a parsable slice of Record.
type Records []*Record
